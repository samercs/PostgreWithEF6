// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Query.SqlExpressions;
using TestPostgreWithEF6.Data.Configurations;
using TestPostgreWithEF6.Models;
using Action = TestPostgreWithEF6.Models.Action;
#nullable disable

namespace TestPostgreWithEF6.Data
{
    public partial class CcsstageContext : DbContext
    {
        public CcsstageContext(DbContextOptions<CcsstageContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Action> Actions { get; set; }
        public virtual DbSet<Letter> Letters { get; set; }
        public virtual DbSet<Memo> Memos { get; set; }
        public virtual DbSet<Memolog> Memologs { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseNpgsql("Server=internalsystems.c12jukf54wnt.me-south-1.rds.amazonaws.com;Port=5432;Database=ccsdevs;User Id=postgres;Password=InterP0st$20;");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasPostgresExtension("dblink")
                .HasPostgresExtension("postgres_fdw");

            modelBuilder.ApplyConfiguration(new Configurations.ActionConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.LetterConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.MemoConfiguration());
            modelBuilder.ApplyConfiguration(new Configurations.MemologConfiguration());
            modelBuilder.HasSequence("letter_serials");

            modelBuilder.HasSequence("memo_serials").HasMin(0);

            var methodInfo = typeof(EFFunctions)
                .GetRuntimeMethod(
                    nameof(EFFunctions.ToString),
                    new[] { typeof(string) }
                );

            var methodAnyInfo = typeof(EFFunctions)
                .GetRuntimeMethod(
                    nameof(EFFunctions.Any),
                    new[] { typeof(string), typeof(string), typeof(string), typeof(bool) }
                );

            modelBuilder.HasDbFunction(methodInfo)
                .HasName("tostring");

            modelBuilder.HasDbFunction(methodAnyInfo)
                .HasName("jsonarraysearch");

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}
